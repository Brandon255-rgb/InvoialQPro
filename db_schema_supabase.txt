create table public.attachments (
  id integer generated always as identity not null,
  file_name text not null,
  file_type text not null,
  file_size integer not null,
  file_path text not null,
  created_at timestamp without time zone not null default now(),
  updated_at timestamp without time zone not null default now(),
  reminder_id integer null,
  user_id uuid null,
  constraint attachments_pkey primary key (id),
  constraint attachments_reminder_id_fkey foreign KEY (reminder_id) references reminders (id) on delete set null,
  constraint attachments_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_attachments_user_id on public.attachments using btree (user_id) TABLESPACE pg_default;

create table public.audit_logs (
  id integer generated always as identity not null,
  action text not null,
  entity text not null,
  entity_id integer null,
  timestamp timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint audit_logs_pkey primary key (id),
  constraint audit_logs_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_audit_logs_user_id on public.audit_logs using btree (user_id) TABLESPACE pg_default;

create table public.billing_history (
  id serial not null,
  stripe_invoice_id text null,
  stripe_charge_id text null,
  amount numeric(10, 2) null,
  currency text null,
  status text null,
  description text null,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint billing_history_pkey primary key (id),
  constraint billing_history_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_billing_history_user_id on public.billing_history using btree (user_id) TABLESPACE pg_default;

create table public.clients (
  id integer generated always as identity not null,
  name character varying(100) not null,
  email character varying(255) not null,
  company character varying(100) null,
  phone character varying(20) null,
  address text null,
  notes text null,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint clients_pkey primary key (id),
  constraint clients_user_id_fkey foreign KEY (user_id) references users (id)
) TABLESPACE pg_default;

create index IF not exists idx_clients_user_id on public.clients using btree (user_id) TABLESPACE pg_default;

create table public.company_settings (
  id integer generated always as identity not null,
  logo_path text null,
  company_name text null,
  tax_number text null,
  address text null,
  phone text null,
  email text null,
  website text null,
  created_at timestamp without time zone not null default now(),
  updated_at timestamp without time zone not null default now(),
  user_id uuid null,
  constraint company_settings_pkey primary key (id),
  constraint company_settings_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_company_settings_user_id on public.company_settings using btree (user_id) TABLESPACE pg_default;

create table public.customers (
  id uuid not null default gen_random_uuid (),
  user_id uuid null,
  full_name text not null,
  email text null,
  phone text null,
  company text null,
  address_line1 text null,
  address_line2 text null,
  city text null,
  state text null,
  country text null,
  postal_code text null,
  notes text null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint customers_pkey primary key (id),
  constraint customers_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_customers_user_id on public.customers using btree (user_id) TABLESPACE pg_default;

create table public.invoice_items (
  id integer generated always as identity not null,
  invoice_id integer null,
  item_id integer null,
  description text not null,
  quantity integer not null,
  price numeric(10, 2) not null,
  total numeric(10, 2) not null,
  user_id uuid null,
  constraint invoice_items_pkey primary key (id),
  constraint invoice_items_invoice_id_fkey foreign KEY (invoice_id) references invoices (id) on delete CASCADE,
  constraint invoice_items_item_id_fkey foreign KEY (item_id) references items (id) on delete set null,
  constraint invoice_items_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_invoice_items_user_id on public.invoice_items using btree (user_id) TABLESPACE pg_default;

create table public.invoice_templates (
  id integer generated always as identity not null,
  name text not null,
  template_path text not null,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint invoice_templates_pkey primary key (id),
  constraint invoice_templates_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_invoice_templates_user_id on public.invoice_templates using btree (user_id) TABLESPACE pg_default;

create table public.invoices (
  id uuid not null default extensions.uuid_generate_v4 (),
  client_id integer null,
  invoice_number character varying(50) not null,
  status character varying(50) null default 'draft'::character varying,
  issue_date date not null,
  due_date date not null,
  subtotal numeric(10, 2) not null,
  tax numeric(10, 2) null default 0,
  discount numeric(10, 2) null default 0,
  total numeric(10, 2) not null,
  notes text null,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null default auth.uid (),
  constraint invoices_pkey primary key (id),
  constraint invoices_client_id_fkey foreign KEY (client_id) references clients (id) on delete CASCADE,
  constraint invoices_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_invoices_user_id on public.invoices using btree (user_id) TABLESPACE pg_default;

create table public.items (
  id integer generated always as identity not null,
  name character varying(100) not null,
  description text null,
  price numeric(10, 2) not null,
  category character varying(50) null,
  is_inventory boolean null default false,
  stock_quantity integer null default 0,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint items_pkey primary key (id),
  constraint items_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_items_user_id on public.items using btree (user_id) TABLESPACE pg_default;

create table public.payment_methods (
  id serial not null,
  stripe_payment_method_id text not null,
  type text not null,
  brand text null,
  last4 text null,
  exp_month integer null,
  exp_year integer null,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint payment_methods_pkey primary key (id),
  constraint payment_methods_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_payment_methods_user_id on public.payment_methods using btree (user_id) TABLESPACE pg_default;

create table public.reminders (
  id integer generated always as identity not null,
  invoice_id integer null,
  title character varying(100) not null,
  description text null,
  due_date date not null,
  is_completed boolean null default false,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint reminders_pkey primary key (id),
  constraint reminders_invoice_id_fkey foreign KEY (invoice_id) references invoices (id) on delete set null,
  constraint reminders_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_reminders_user_id on public.reminders using btree (user_id) TABLESPACE pg_default;

create table public.subscriptions (
  id serial not null,
  stripe_subscription_id text not null,
  status text not null,
  price_id text not null,
  current_period_start timestamp without time zone null,
  current_period_end timestamp without time zone null,
  cancel_at_period_end boolean null default false,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  user_id uuid null,
  constraint subscriptions_pkey primary key (id),
  constraint subscriptions_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_subscriptions_user_id on public.subscriptions using btree (user_id) TABLESPACE pg_default;

CREATE TABLE public.team_members (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  invited_by uuid NOT NULL,
  email text NOT NULL,
  role public.role NOT NULL DEFAULT 'user'::role,
  status text NOT NULL DEFAULT 'pending'::text,
  invite_token text NULL,
  created_at timestamp without time zone NOT NULL DEFAULT now(),
  updated_at timestamp without time zone NOT NULL DEFAULT now(),
  user_id uuid NULL,
  CONSTRAINT team_members_pkey PRIMARY KEY (id),
  CONSTRAINT team_members_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id),
  CONSTRAINT team_members_invited_by_fkey FOREIGN KEY (invited_by) REFERENCES auth.users (id)
) TABLESPACE pg_default;

create index IF not exists idx_team_members_user_id on public.team_members using btree (user_id) TABLESPACE pg_default;

create table public.user_settings (
  user_id uuid not null,
  theme text not null default 'light'::text,
  updated_at timestamp with time zone null default now(),
  fontsize text not null default 'medium'::text,
  currency text not null default 'USD'::text,
  dateformat text not null default 'MM/DD/YYYY'::text,
  twofactorauth boolean not null default false,
  sessiontimeout text not null default '30'::text,
  loginnotifications boolean not null default true,
  emailnotifications boolean not null default true,
  invoicereminders boolean not null default true,
  paymentnotifications boolean not null default true,
  marketingemails boolean not null default false,
  reminderfrequency text not null default 'weekly'::text,
  constraint user_settings_pkey primary key (user_id),
  constraint user_settings_user_id_fkey foreign KEY (user_id) references auth.users (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_user_settings_user_id on public.user_settings using btree (user_id) TABLESPACE pg_default;

create table public.users (
  id uuid not null,
  email text not null,
  name text null,
  role text null default 'user'::text,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  company text null,
  phone text null,
  address text null,
  city text null,
  state text null,
  country text null,
  postal_code text null,
  website text null,
  profile_picture text null,
  bio text null,
  job_title character varying(100) null,
  department character varying(100) null,
  timezone character varying(100) null,
  language character varying(50) null,
  date_of_birth date null,
  gender character varying(20) null,
  linkedin text null,
  twitter text null,
  facebook text null,
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email)
) TABLESPACE pg_default;

create table public.invoice_payments (
  id uuid primary key default uuid_generate_v4(),
  invoice_id uuid references public.invoices(id) on delete cascade,
  amount numeric(10, 2) not null,
  method text,
  payment_date timestamp default now(),
  user_id uuid references auth.users(id) default auth.uid()
);

create table public.activity_feed (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id) default auth.uid(), -- Auth context user
  event_type text not null,
  payload jsonb,
  created_at timestamp default now()
);

create table public.tags (
  id uuid primary key default uuid_generate_v4(),
  name text not null,
  user_id uuid references auth.users(id) default auth.uid()
);

create table public.invoice_tags (
  invoice_id uuid references public.invoices(id) on delete cascade,
  tag_id uuid references public.tags(id) on delete cascade,
  primary key (invoice_id, tag_id)
);

create trigger update_users_updated_at BEFORE
update on users for EACH row
execute FUNCTION update_updated_at_column ();

INSERT INTO "public"."users" ("id", "email", "name", "role", "created_at", "updated_at", "company", "phone", "address", "city", "state", "country", "postal_code", "website", "profile_picture", "bio", "job_title", "department", "timezone", "language", "date_of_birth", "gender", "linkedin", "twitter", "facebook") VALUES ('3f92d869-c87c-4edb-abcc-ac4e635c5b47', 'brandon.vanvuuren60@gmail.com', 'Brandon', 'admin', '2025-05-22 07:45:19+00', '2025-05-22 07:45:21+00', null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);